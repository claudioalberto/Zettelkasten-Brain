/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => BibleLinkerPlugin
});
var import_obsidian5 = __toModule(require("obsidian"));

// src/modals/copy-verse-modal.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/utils/convert-link.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/utils/regexes.ts
var oneVerseRegEx = new RegExp(/([^,:#]+)[,#.:;]\s*(\d+)\s*$/);
var multipleVersesRegEx = new RegExp(/([^,:#]+)[,#.:;]\s*(\d+)\s*[-.=]\s*(\d+)\s*$/);
var bookAndChapterRegexForOBSK = /([^,:#]+)\s(\d+)/;

// src/modals/link-verse-modal.ts
var import_obsidian = __toModule(require("obsidian"));
var LinkType;
(function(LinkType2) {
  LinkType2["Basic"] = "Basic";
  LinkType2["Embedded"] = "Embedded";
  LinkType2["Invisible"] = "Invisible";
})(LinkType || (LinkType = {}));
var LinkVerseModal = class extends import_obsidian.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.handleInput = () => __async(this, null, function* () {
      try {
        const res = yield getLinksToVerses(this.app, this.userInput, this.linkType, this.useNewLine, this.pluginSettings);
        this.close();
        this.onSubmit(res);
      } catch (err) {
        return;
      }
    });
    this.onSubmit = onSubmit;
    this.pluginSettings = settings;
    this.linkType = this.pluginSettings.linkTypePreset;
    this.useNewLine = this.pluginSettings.newLinePreset;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Create Obsidian links from Bible reference" });
    new import_obsidian.Setting(contentEl).setName("Insert reference").addText((text) => text.onChange((value) => {
      this.userInput = value;
    }).inputEl.focus());
    new import_obsidian.Setting(contentEl).setName("Link type").addDropdown((dropdown) => {
      dropdown.addOption(LinkType.Basic, LinkType.Basic);
      dropdown.addOption(LinkType.Embedded, LinkType.Embedded);
      dropdown.addOption(LinkType.Invisible, LinkType.Invisible);
      dropdown.onChange((value) => this.linkType = value);
      dropdown.setValue(this.pluginSettings.linkTypePreset);
    });
    new import_obsidian.Setting(contentEl).setName("Each link on new line?").addToggle((tgl) => {
      tgl.setValue(this.pluginSettings.newLinePreset);
      tgl.onChange((val) => this.useNewLine = val);
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Link").setCta().onClick(this.handleInput);
    });
    contentEl.onkeydown = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.handleInput();
      }
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/utils/convert-link.ts
function getLinksToVerses(app, userInput, linkType, useNewLine, settings) {
  return __async(this, null, function* () {
    let { bookAndChapter, beginVerse, endVerse } = parseUserInput(userInput);
    bookAndChapter = capitalize(bookAndChapter);
    if (settings.verifyFilesWhenLinking) {
      const { fileName, tFile } = getFileFromBookAndChapter(app, bookAndChapter);
      if (!tFile) {
        new import_obsidian2.Notice(`File "${fileName}" does not exist and verify files is set to true`);
        throw `File ${fileName} does not exist, verify files = true`;
      }
    }
    if (beginVerse > endVerse) {
      new import_obsidian2.Notice("Begin verse is bigger than end verse");
      throw "Begin verse is bigger than end verse";
    }
    let res = "";
    const beginning = linkType === LinkType.Embedded ? "!" : "";
    const ending = linkType === LinkType.Invisible ? "|" : "";
    for (let i = beginVerse; i <= endVerse; i++) {
      res += `${beginning}[[${bookAndChapter}${settings.linkSeparator}${settings.versePrefix}${i}${ending}]]`;
      if (useNewLine) {
        res += "\n";
      }
    }
    return res;
  });
}
function getTextOfVerses(app, userInput, settings) {
  return __async(this, null, function* () {
    let { bookAndChapter, beginVerse, endVerse } = parseUserInput(userInput);
    bookAndChapter = capitalize(bookAndChapter);
    const { fileName, tFile } = getFileFromBookAndChapter(app, bookAndChapter);
    if (tFile) {
      return yield createCopyOutput(app, tFile, bookAndChapter, fileName, beginVerse, endVerse, settings);
    } else {
      new import_obsidian2.Notice(`File ${bookAndChapter} not found`);
      throw "File not found";
    }
  });
}
function getFileFromBookAndChapter(app, bookAndChapter) {
  let fileName = bookAndChapter;
  let tFile = app.metadataCache.getFirstLinkpathDest(fileName, "/");
  if (!tFile) {
    fileName = tryConvertToOBSKFileName(fileName);
    tFile = app.metadataCache.getFirstLinkpathDest(fileName, "/");
  }
  return { fileName, tFile };
}
function parseUserInput(userInput) {
  let bookAndChapter;
  let beginVerse;
  let endVerse;
  switch (true) {
    case oneVerseRegEx.test(userInput): {
      const [, matchedChapter, matchedVerse] = userInput.match(oneVerseRegEx);
      bookAndChapter = matchedChapter;
      beginVerse = Number(matchedVerse);
      endVerse = Number(matchedVerse);
      break;
    }
    case multipleVersesRegEx.test(userInput): {
      const [, matchedChapter, matchedBeginVerse, matchedEndVerse] = userInput.match(multipleVersesRegEx);
      bookAndChapter = matchedChapter;
      beginVerse = Number(matchedBeginVerse);
      endVerse = Number(matchedEndVerse);
      break;
    }
    default: {
      new import_obsidian2.Notice(`Wrong format "${userInput}"`);
      throw "Could not parse user input";
    }
  }
  return { bookAndChapter, beginVerse, endVerse };
}
function capitalize(str) {
  str = str.toLocaleLowerCase();
  for (let i = 0; i < str.length; i++) {
    if (/[^\s\d.,#-]/.test(str.charAt(i))) {
      return str.slice(0, i) + str.charAt(i).toUpperCase() + str.slice(i + 1);
    }
  }
  return str;
}
function getVerseText(verseNumber, headings, lines, keepNewlines, newLinePrefix) {
  if (verseNumber >= headings.length) {
    new import_obsidian2.Notice("Verse out of range for given file");
    throw `VerseNumber ${verseNumber} is out of range of headings with length ${headings.length}`;
  }
  const headingLine = headings[verseNumber].position.start.line;
  if (headingLine + 1 >= lines.length) {
    new import_obsidian2.Notice("Logical error - please create issue on plugin's GitHub with your input and the file you were referencing. Thank you!");
    throw `HeadingLine ${headingLine + 1} is out of range of lines with length ${lines}`;
  }
  let output = "";
  let line = "";
  let i = 1;
  let isFirst = true;
  while (true) {
    line = lines[headingLine + i];
    if (/#/.test(line) || !line && !isFirst) {
      break;
    }
    i++;
    if (line) {
      if (!isFirst) {
        output += keepNewlines ? `
${newLinePrefix}` : " ";
      }
      isFirst = false;
      output += line;
    }
  }
  return output;
}
function tryConvertToOBSKFileName(bookAndChapter) {
  if (bookAndChapterRegexForOBSK.test(bookAndChapter)) {
    let [, book, number] = bookAndChapter.match(bookAndChapterRegexForOBSK);
    if (number.length == 1) {
      number = `0${number}`;
    }
    return `${book}-${number}`;
  }
}
function replaceNewline(input) {
  return input.replace(/\\n/g, "\n");
}
function createCopyOutput(app, tFile, userChapterInput, fileName, beginVerse, endVerse, settings) {
  return __async(this, null, function* () {
    const file = app.vault.read(tFile);
    const lines = (yield file).split(/\r?\n/);
    const verseHeadingLevel = settings.verseHeadingLevel;
    const headings = app.metadataCache.getFileCache(tFile).headings.filter((heading) => !verseHeadingLevel || heading.level === verseHeadingLevel);
    const beginVerseNoOffset = beginVerse;
    const endVerseNoOffset = endVerse;
    beginVerse += settings.verseOffset;
    endVerse += settings.verseOffset;
    if (beginVerse > endVerse) {
      new import_obsidian2.Notice("Begin verse is bigger than end verse");
      throw "Begin verse is bigger than end verse";
    }
    if (headings.length <= beginVerse) {
      new import_obsidian2.Notice("Begin verse out of range of chapter");
      throw "Begin verse out of range of chapter";
    }
    let res = settings.prefix;
    const postfix = settings.postfix ? replaceNewline(settings.postfix) : " ";
    if (beginVerse === endVerse) {
      res += `[[${fileName}#${headings[beginVerse].heading}|${userChapterInput}${settings.oneVerseNotation}${beginVerseNoOffset}]]${postfix}`;
    } else if (settings.linkEndVerse) {
      res += `[[${fileName}#${headings[beginVerse].heading}|${userChapterInput}${settings.multipleVersesNotation}${beginVerseNoOffset}-]]`;
      res += `[[${fileName}#${headings[endVerse].heading}|${endVerseNoOffset}]]${postfix}`;
    } else {
      res += `[[${fileName}#${headings[beginVerse].heading}|${userChapterInput}${settings.multipleVersesNotation}${beginVerseNoOffset}-${endVerseNoOffset}]]${postfix}`;
    }
    for (let i = beginVerse; i <= endVerse; i++) {
      let eachVersePrefix = "";
      if (settings.eachVersePrefix) {
        eachVersePrefix += settings.eachVersePrefix.replace("{n}", (i - settings.verseOffset).toString());
      }
      const verseText = getVerseText(i, headings, lines, settings.newLines, settings.prefix);
      if (settings.newLines) {
        res += "\n" + settings.prefix + eachVersePrefix + verseText;
      } else {
        res += eachVersePrefix + verseText + " ";
      }
    }
    if (beginVerse == endVerse || !settings.useInvisibleLinks)
      return res;
    if (settings.newLines) {
      res += `
${settings.prefix}`;
    }
    for (let i = beginVerse; i <= endVerse; i++) {
      res += `[[${fileName}#${headings[i].heading}|]]`;
    }
    return res;
  });
}

// src/modals/copy-verse-modal.ts
var CopyVerseModal = class extends import_obsidian3.Modal {
  constructor(app, settings, onSubmit) {
    super(app);
    this.handleInput = () => __async(this, null, function* () {
      try {
        const res = yield getTextOfVerses(this.app, this.userInput, this.pluginSettings);
        this.close();
        this.onSubmit(res);
      } catch (err) {
        return;
      }
    });
    this.onSubmit = onSubmit;
    this.pluginSettings = settings;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Copy verse by bible reference" });
    new import_obsidian3.Setting(contentEl).setName("Insert reference").addText((text) => text.onChange((value) => {
      this.userInput = value;
    }).inputEl.focus());
    new import_obsidian3.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Link").setCta().onClick(this.handleInput);
    });
    contentEl.onkeydown = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        this.handleInput();
      }
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var import_obsidian4 = __toModule(require("obsidian"));
var SettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian4.Setting(containerEl).setHeading().setName("Copy bible verses settings");
    new import_obsidian4.Setting(containerEl).setName("Verse offset").setDesc('Change this if wrong verses are being linked, e.g. you want "Gen 1,1-3" but output is text from verses 2-4 \u2192 set this to -1').addText((inputBox) => inputBox.setValue(this.plugin.settings.verseOffset.toString()).onChange((value) => __async(this, null, function* () {
      const number = Number.parseInt(value);
      if (value === "-")
        return;
      if (Number.isNaN(number)) {
        new import_obsidian4.Notice("Invalid input, please insert valid integer");
        inputBox.setValue("");
        return;
      }
      this.plugin.settings.verseOffset = number;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Verse heading level").setDesc('If set, only headings of specified level are considered verses (if first heading of this level is always a verse, also set "Verse offset" to -1)').addDropdown((dropdown) => {
      var _a, _b;
      dropdown.addOption("any", "any");
      dropdown.addOption("6", "######");
      dropdown.addOption("5", "#####");
      dropdown.addOption("4", "####");
      dropdown.addOption("3", "###");
      dropdown.addOption("2", "##");
      dropdown.addOption("1", "#");
      dropdown.setValue((_b = (_a = this.plugin.settings.verseHeadingLevel) == null ? void 0 : _a.toString()) != null ? _b : "any");
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.verseHeadingLevel = value === "any" ? void 0 : Number(value);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian4.Setting(containerEl).setName("Line prefix").setDesc("String inserted in front of every line, for example '>' for quote. Note: If you set 'Put each verse on a new line?' to true, the prefix will be inserted in front of every line.").addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.prefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.prefix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Link postfix").setDesc("String inserted after biblical link, you can use \\n to insert newline.").addText((inputBox) => inputBox.setPlaceholder("Insert postfix here").setValue(this.plugin.settings.postfix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.postfix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Each verse prefix").setDesc('String inserted in front of every copied verse. You can use "{n}" where you want number of given verse inserted, for example "**{n}** " will make each verse start with bold verse number. Leave empty for no prefix.').addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.eachVersePrefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.eachVersePrefix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Link to last verse?").setDesc("Should last verse be linked in the visible link before text of verses?").addToggle((toggle) => toggle.setValue(this.plugin.settings.linkEndVerse).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.linkEndVerse = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Add invisible links?").setDesc("Invisible links are added to each verse used (so you can find the connections later), they are only visible in source mode.").addToggle((toggle) => toggle.setValue(this.plugin.settings.useInvisibleLinks).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.useInvisibleLinks = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Put each verse on a new line?").setDesc("Each verse is inserted on a new line (with Link prefix).").addToggle((toggle) => toggle.setValue(this.plugin.settings.newLines).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.newLines = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("One verse notation").setDesc('This is the symbol that will be used between chapter number and verse number when copying one verse. For example "." \u2192 Gen 1.1.').addText((inputBox) => inputBox.setPlaceholder("Insert notation symbol here").setValue(this.plugin.settings.oneVerseNotation).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.oneVerseNotation = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Multiple verses notation").setDesc('This is the symbol that will be used between chapter number and verse number when copying multiple verses. For example "," \u2192 Gen 1,1-3.').addText((inputBox) => inputBox.setPlaceholder("Insert notation symbol here").setValue(this.plugin.settings.multipleVersesNotation).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.multipleVersesNotation = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setHeading().setName("Create obsidian links to bible verses settings");
    new import_obsidian4.Setting(containerEl).setName("Link separator").setDesc("This is the separator that will be used when linking, e.g. if you enter '#' here, output will be [[Gen 1#1]]. If you are using headings to mark verses, use '#'. If you are using block references, use '^'.").addText((inputBox) => inputBox.setPlaceholder("Insert separator here").setValue(this.plugin.settings.linkSeparator).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.linkSeparator = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Verify files?").setDesc("Verify existence of files you are trying to link, so that you are not inserting wrong references by mistake.").addToggle((toggle) => toggle.setValue(this.plugin.settings.verifyFilesWhenLinking).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.verifyFilesWhenLinking = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Verse prefix").setDesc('Fill this if you are using verse prefixes in your bible files, e.g. you have "v1" in your file \u2192 set to "v".').addText((inputBox) => inputBox.setPlaceholder("Insert prefix here").setValue(this.plugin.settings.versePrefix).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.versePrefix = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(containerEl).setName("Link type default value").setDesc("Value that will be selected by default in link modal.").addDropdown((dropdown) => {
      dropdown.addOption(LinkType.Basic, LinkType.Basic);
      dropdown.addOption(LinkType.Embedded, LinkType.Embedded);
      dropdown.addOption(LinkType.Invisible, LinkType.Invisible);
      dropdown.setValue(this.plugin.settings.linkTypePreset);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.linkTypePreset = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian4.Setting(containerEl).setName("Use new lines default value").setDesc("Value that will be selected by default in link modal.").addToggle((toggle) => toggle.setValue(this.plugin.settings.newLinePreset).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.newLinePreset = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  prefix: "",
  postfix: "",
  linkEndVerse: false,
  verseOffset: 0,
  verseHeadingLevel: void 0,
  useInvisibleLinks: true,
  newLines: false,
  eachVersePrefix: "",
  oneVerseNotation: ".",
  multipleVersesNotation: ",",
  verifyFilesWhenLinking: false,
  versePrefix: "",
  linkTypePreset: LinkType.Basic,
  newLinePreset: true,
  linkSeparator: "#"
};
var BibleLinkerPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.openCopyModal = () => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (view) {
        new CopyVerseModal(this.app, this.settings, (str) => view.editor.replaceRange(str, view.editor.getCursor())).open();
      }
    };
    this.openObsidianLinkModal = () => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (view) {
        new LinkVerseModal(this.app, this.settings, (str) => view.editor.replaceRange(str, view.editor.getCursor())).open();
      }
    };
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new SettingsTab(this.app, this));
      this.addCommand({
        id: "insert-bible-link",
        name: "Copy Bible verses",
        editorCallback: this.openCopyModal
      });
      this.addCommand({
        id: "insert-bible-link-obsidian-link",
        name: "Create Obsidian links to Bible verses",
        editorCallback: this.openObsidianLinkModal
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
